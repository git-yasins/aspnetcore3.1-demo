
docker pull redis #下载DOCKER
docker images #查看本地所有镜像
docker push self-redis #提交本地镜像到仓库
docker ps #查看运行的容器
docker ps -a #查看没有运行的容器

#运行容器
docker run -d -p 6379:6379 --name redis01 redis
-p(point) #内部端口映射外部端口
-d(detach) #分离运行 在后台运行,不阻止当前命令行,可以继续操作

#重新运行停止的docker镜像 ,可以是镜像名,也可以是IMAGE ID(可以指定前几位数字,不用写全)
#docker start redis
#停止已经运行的镜像
docker stop redis
#进入mysql命令行
1.docker exec -it b469(ImageId) bash
2.mysql -u root -p
3.password

docker rm mysql #删除容器

#重启docker的系统服务
service docker restart

#阿里云服务器配置
https://www.cnblogs.com/zhaoxusheng/p/5410467.html

linux开启端口
https://www.cnblogs.com/rxbook/p/8110143.html

#centos7 端口和防火墙配置
https://www.cnblogs.com/heqiuyong/p/10460150.html
https://www.cnblogs.com/l-hh/p/11213506.html

centos7安装docker
https://help.aliyun.com/document_detail/51853.html?spm=5176.10695662.1996646101.searchclickresult.6afa1666yqsfY3

#mysql 安装与配置
https://www.cnblogs.com/starof/p/4680083.html
https://www.cnblogs.com/geogre123/p/10342486.html

#centos 安装 netcore
https://www.cnblogs.com/esofar/p/8043792.html

#linux docker部署gitlab本地代码仓库
https://blog.csdn.net/weixin_38287709/article/details/103314136
https://www.clxz.top/2019/03/31/111040/

#docker运行gitlabwgwy
sudo docker run --detach \
    --hostname 182.92.70.45 \
    --publish 80:80 \
    --name gitlab \
    --restart always \
    --volume /srv/gitlab/config:/etc/gitlab \
    --volume /srv/gitlab/logs:/var/log/gitlab \
    --volume /srv/gitlab/data:/var/opt/gitlab \
    gitlab/gitlab-ce:latest

#详细说明
sudo docker run --detach \
  --publish 443:443 --publish 80:80 --publish 22:22 \ # 本地端口的映射
  --name gitlab \     # gitlab-ce 的镜像运行成为一个容器，这里是对容器的命名
  --restart always \  # 设置重启方式，always 代表一直开启，服务器开机后也会自动开启的
  --volume /project/gitlab/config:/etc/gitlab \   # 将 gitlab 的配置文件目录映射到 /srv/gitlab/config 目录中
  --volume /project/gitlab/logs:/var/log/gitlab \ # 将 gitlab 的log文件目录映射到 /srv/gitlab/logs 目录中
  --volume /project/gitlab/data:/var/opt/gitlab \ # 将 gitlab 的数据文件目录映射到 /srv/gitlab/data 目录中
  docker.io/gitlab/gitlab-ce:latest  # 需要运行的镜像

  #docker 运行jekins
docker run -itd -p 8080:8080 --name jenkins --privileged=true  -v /home/jenkins:/var/jenkins_home jenkins:latest
firewall-cmd --permanent --zone=home --add-forward-port=port=8080:proto=tcp:toaddr=0.0.0.0


